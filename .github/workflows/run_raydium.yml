# File: .github/workflows/run_raydium.yml

name: Run Raydium Solar Map Generation

on:
  # Allows manual triggering of the workflow
  workflow_dispatch:

  # Optional: Schedule the workflow to run periodically (e.g., daily at midnight UTC)
  # Uncomment the following lines to enable scheduling
  # schedule:
  #   - cron: '0 0 * * *'  # Runs every day at midnight UTC

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Specify the Python version you need

      # 3. Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Cache NASA POWER data
      - name: Cache NASA POWER data
        uses: actions/cache@v3
        with:
          path: nasa_power_cache
          key: ${{ runner.os }}-nasa_power_cache-${{ hashFiles('**/raydium.py') }}
          restore-keys: |
            ${{ runner.os }}-nasa_power_cache-

      # 5. Install dependencies from requirements.txt
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 6. Verify 'india-soi.geojson' presence
      - name: Verify 'india-soi.geojson' Presence
        run: |
          if [ -f india-soi.geojson ]; then
            echo "'india-soi.geojson' found."
          else
            echo "'india-soi.geojson' not found. Please ensure it exists in the repository root."
            exit 1  # Exit the workflow with an error
          fi

      # 7. List files before running the script (Diagnostic)
      - name: List Files Before Script Execution
        run: |
          echo "Listing files before running the script:"
          ls -la

      # 8. Run the Python script and capture output
      - name: Run Python Script
        run: |
          echo "Executing raydium.py..."
          python raydium.py

      # 9. List files after running the script (Diagnostic)
      - name: List Files After Script Execution
        run: |
          echo "Listing files after running the script:"
          ls -la

      # 10. Optionally, display contents of log file if it exists (Diagnostic)
      - name: Display log file
        if: success()
        run: |
          if [ -f "solar_map.log" ]; then
            echo "Displaying solar_map.log contents:"
            cat solar_map.log
          else
            echo "solar_map.log does not exist."
          fi

      # 11. Configure Git for committing changes
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 12. Add generated files to git
      - name: Add Output Files
        run: |
          git add india_solar_potential.html india_solar_data.csv solar_potential_high_res.png solar_map.log || echo "No output files to add."

      # 13. Commit the changes
      - name: Commit Changes
        run: |
          git commit -m "Update solar map outputs via GitHub Actions" || echo "No changes to commit"

      # 14. Push the changes back to the repository
      - name: Push Changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}